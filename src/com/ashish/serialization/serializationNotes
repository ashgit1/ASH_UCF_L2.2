Serialization in Java:
----------------------

Serialization in java is a mechanism of writing the state of an object into a byte stream.
It is mainly used in Hibernate, RMI, JPA, EJB, JMS technologies.
The reverse operation of serialization is called deserialization.

The String class and all the wrapper classes implements java.io.Serializable interface by default.

Advantage of Java Serialization:
---------------------------------

It is mainly used to travel object's state on the network (known as "marshaling").

java.io.Serializable interface:
--------------------------------

Serializable is a marker interface (has no body). It is just used to "mark" java classes which support 
a certain capability. It must be implemented by the class whose object you want to persist.
ex: Student.java

ObjectOutputStream class:
-------------------------

The ObjectOutputStream class is used to write primitive data types and Java objects to an OutputStream. 
Only objects that support the java.io.Serializable interface can be written to streams.

Constructor:
------------

1) public ObjectOutputStream(OutputStream out) throws IOException {}
creates an ObjectOutputStream that writes to the specified OutputStream.

Important Methods:
------------------

-------------------------------------------------------------------------------------------------------------------------------
Method																|	Description
-------------------------------------------------------------------------------------------------------------------------------
1) public final void writeObject(Object obj) throws IOException {}	|	writes the specified object to the ObjectOutputStream.
-------------------------------------------------------------------------------------------------------------------------------
2) public void flush() throws IOException {}						|	flushes the current output stream.
-------------------------------------------------------------------------------------------------------------------------------
3) public void close() throws IOException {}						|	closes the current output stream.
-------------------------------------------------------------------------------------------------------------------------------

Example of Java Serialization : Persist.java

Deserialization in java:
------------------------

Deserialization is the process of reconstructing the object from the serialized state.
It is the reverse operation of serialization.

ObjectInputStream class:
------------------------

An ObjectInputStream deserializes objects and primitive data written using an ObjectOutputStream.

Constructor:
------------

1) public ObjectInputStream(InputStream in) throws IOException {}	
creates an ObjectInputStream that reads from the specified InputStream.

Important Methods:
------------------

------------------------------------------------------------------------------------------------------------------------
Method																		      |		Description:
------------------------------------------------------------------------------------------------------------------------

1) public final Object readObject() throws IOException, ClassNotFoundException{}  |	reads an object from the input stream.
------------------------------------------------------------------------------------------------------------------------
2) public void close() throws IOException {}									  | closes ObjectInputStream.  
------------------------------------------------------------------------------------------------------------------------

Example of Java Deserialization: Depersist.java

Java Serialization with Inheritance (IS-A Relationship):
--------------------------------------------------------

If a class implements serializable then all its sub classes will also be serializable. Let's see the example given below:

import java.io.Serializable;  
class Person implements Serializable{  
 int id;  
 String name;  
 Person(int id, String name) {  
  this.id = id;  
  this.name = name;  
 }  
}  

class Student extends Person{  
 String course;  
 int fee;  
 public Student(int id, String name, String course, int fee) {  
  super(id,name);  
  this.course=course;  
  this.fee=fee;  
 }  
}  

Now you can serialize the Student class object that extends the Person class which is Serializable.
Parent class properties are inherited to subclasses so if parent class is Serializable, subclass would also be.

Java Serialization with Aggregation (HAS-A Relationship):
--------------------------------------------------------

If a class has a reference of another class, all the references must be Serializable otherwise serialization 
process will not be performed. In such case, "NotSerializableException" is thrown at runtime.

class Address{  
 String addressLine,city,state;  
 public Address(String addressLine, String city, String state) {  
  this.addressLine=addressLine;  
  this.city=city;  
  this.state=state;  
 }  
}  

import java.io.Serializable;  
public class Student implements Serializable{  
 int id;  
 String name;  
 Address address;//HAS-A  
 public Student(int id, String name) {  
  this.id = id;  
  this.name = name;  
 }  
}  

Since Address is not Serializable, you can not serialize the instance of Student class.

Note:
-----

"All the objects within an object must be Serializable."


Java Serialization with static data member:
-------------------------------------------

If there is any static data member in a class, it will not be serialized because static is the part of class not object.

class Employee implements Serializable{  
 int id;  
 String name;  
 static String company="SSS IT Pvt Ltd";//it won't be serialized  
 public Student(int id, String name) {  
  this.id = id;  
  this.name = name;  
 }  
}  

Java Serialization with array or collection:
--------------------------------------------

Rule: In case of array or collection, all the objects of array or collection must be serializable. 
If any object is not serialiizable, serialization will be failed.

Externalizable in java:
-----------------------

The Externalizable interface provides the facility of writing the state of an object into a byte stream 
in compress format. It is not a marker interface.

The Externalizable interface provides two methods:
--------------------------------------------------

public void writeExternal(ObjectOutput out) throws IOException
public void readExternal(ObjectInput in) throws IOException

Java Transient Keyword:
-----------------------

If you don't want to serialize any data member of a class, you can mark it as transient.

Java transient keyword is used in serialization. If you define any data member as transient, 
it will not be serialized.

Let's take an example, I have declared a class as Student, it has three data members id, name and age. 
If you serialize the object, all the values will be serialized but I don't want to serialize one value, 
e.g. age then we can declare the age data member as transient.

Example of Java Transient Keyword:
----------------------------------

In this example, we have created the two classes Student and PersistExample. 
The age data member of the Student class is declared as transient, its value will not be serialized.

"If you deserialize the object, you will get the default value for transient variable."

ex: Employee.java and PersistTransient.java






