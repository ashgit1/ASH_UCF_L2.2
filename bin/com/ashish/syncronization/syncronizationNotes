Synchronization in Java:
-------------------------

Synchronization in java is the capability to control the access of multiple threads to any shared resource.
Java Synchronization is better option where we want to allow only one thread to access the shared resource.

What is monitor in multi threading ?
In concurrent programming, a monitor is an object or module intended to be used safely by more than one thread.


Why use Synchronization ?

The synchronization is mainly used to:

To prevent thread interference.
To prevent consistency problem.

Types of Synchronization:
-------------------------

There are two types of synchronization:

Process Synchronization
Thread Synchronization

Here, we will discuss only thread synchronization.

Thread Synchronization:
-----------------------

There are two types of thread synchronization mutual exclusive and inter-thread communication.

A. Mutual Exclusive:
-----------------
1. Synchronized method.
1. Synchronized block.
3. static synchronization.

B. Cooperation (Inter-thread communication in java):
----------------------------------------------------

Mutual Exclusive:
-----------------

Mutual Exclusive helps keep threads from interfering with one another while sharing data.
This can be done by three ways in java:

by synchronized method
by synchronized block
by static synchronization

Concept of Lock in Java:
------------------------

Synchronization is built around an internal entity known as the lock or monitor. 
Every object has an lock associated with it. 
By convention, a thread that needs consistent access to an object's fields has to acquire the object's 
lock before accessing them, and then release the lock when it's done with them.

From Java 5 the package "java.util.concurrent.locks" contains several lock implementations.

Understanding the problem without Synchronization:
--------------------------------------------------

In this example, there is no synchronization, so output is inconsistent.
Ex: WithOutSyncronization.java


Java synchronized method:
-------------------------

If you declare any method as synchronized, it is known as synchronized method.
Synchronized method is used to lock an object for any shared resource.
When a thread invokes a synchronized method, it automatically acquires the lock for that object 
and releases it when the thread completes its task.

Ex: WithSynchronization.java

Example of synchronized method by using annonymous class:
---------------------------------------------------------

annonymous class:
-----------------

A class that have no name is known as anonymous inner class in java. 
It should be used if you have to override method of class or interface. 
eg: Runnable Interface.

Runnable r = new Runnable(){
	public void run(){}
}

Thread t1 = new Thread() {
	public void run() {}
}

Java Anonymous inner class can be created by two ways:

Class (may be abstract or concrete).
Interface

In this program, we have created the two threads by annonymous class, so less coding is required.

ex: TestSynchronization3.java

Synchronized block in java:
---------------------------

Synchronized block can be used to perform synchronization on any specific resource of the method.
Suppose you have 50 lines of code in your method, but you want to synchronize only 5 lines, 
you can use synchronized block.
If you put all the codes of the method in the synchronized block, it will work same as the synchronized method.

Points to remember for Synchronized block:
------------------------------------------

1. Synchronized block is used to lock an object for any shared resource.
2. Scope of synchronized block is smaller than the method.

Syntax to use synchronized block
synchronized (object reference expression) {   
  //code block   
}  

ex: SyncronizationBlock.java

Same Example of synchronized block by using annonymous class:
-------------------------------------------------------------

http://www.javatpoint.com/synchronized-block-example/TestSynchronizedBlock2.java

Static synchronization:
-----------------------

If you make any static method as synchronized, the lock will be on the class not on object.

Diagram:
--------
http://www.javatpoint.com/static-synchronization-example

Problem without static synchronization:
---------------------------------------

Suppose there are two objects of a shared class(e.g. Table) named object1 and object2.
In case of synchronized method and synchronized block there cannot be interference between t1 and t2 
or t3 and t4 because t1 and t2 both refers to a common object that have a single lock.
But there can be interference between t1 and t3 or t2 and t4 because t1 acquires another lock and 
t3 acquires another lock.I want no interference between t1 and t3 or t2 and t4.
Static synchronization solves this problem.

ex: StaticSynchronization.java

Same example of static synchronization by annonymous class:
-----------------------------------------------------------

ex: http://www.javatpoint.com/static-synchronization-example/TestSynchronization5 .java

Synchronized block on a class lock:
-----------------------------------

public class Table{
	synchronized static void printTable(int n){
	}
}

A static synchronized method printTable(int n) in class Table is equivalent to the following declaration:

static void printTable(int n) {  
    synchronized (Table.class) {       // Synchronized block on class A  
        // ...  
    }  
} 

eg: StaticSynchronization.java

Deadlock in java:
------------------

Deadlock in java is a part of multithreading. 
Deadlock can occur in a situation when a thread is waiting for an object lock, 
that is acquired by another thread and second thread is waiting for an object lock that is 
acquired by first thread. Since, both threads are waiting for each other to release the lock, 
the condition is called deadlock. 

diagram: http://www.javatpoint.com/deadlock-in-java

eg: TestDeadlockExample1.java

Inter-thread communication in Java:
-----------------------------------

Inter-thread communication or Co-operation is all about allowing synchronized threads to communicate 
with each other.

Cooperation (Inter-thread communication) is a mechanism in which a thread is paused running in its 
critical section and another thread is allowed to enter (or lock) in the same critical section to be executed.
It is implemented by following methods of Object class:

wait()
notify()
notifyAll()

1) wait() method:
-----------------

Causes current thread to release the lock and wait until either another thread invokes the notify() 
method or the notifyAll() method for this object, or a specified amount of time has elapsed.

The current thread must own this object's monitor, so it must be called from the synchronized 
method only otherwise it will throw exception.

Method	Description:
---------------------

----------------------------------------------------------------------------------------------------------------
public final void wait()throws InterruptedException					|	waits until object is notified.
public final void wait(long timeout) throws InterruptedException	|	waits for the specified amount of time.
----------------------------------------------------------------------------------------------------------------

2) notify() method:
-------------------

Wakes up a single thread that is waiting on this object's monitor. 
If any threads are waiting on this object, one of them is chosen to be awakened. 
The choice is arbitrary and occurs at the discretion of the implementation. 

Syntax: public final void notify()

3) notifyAll() method:
----------------------

Wakes up all threads that are waiting on this object's monitor. 

Syntax: public final void notifyAll()

Understanding the process of inter-thread communication daigram:
http://www.javatpoint.com/inter-thread-communication-example

The point to point explanation of the above diagram is as follows:

1. Threads enter to acquire lock.
2. Lock is acquired by on thread.
3. Now thread goes to waiting state if you call wait() method on the object. Otherwise it releases the lock and exits.
4. If you call notify() or notifyAll() method, thread moves to the notified state (runnable state).
5. Now thread is available to acquire lock.
6. After completion of the task, thread releases the lock and exits the monitor state of the object.

Question:
---------

Why wait(), notify() and notifyAll() methods are defined in Object class not Thread class?
It is because they are related to lock and object has a lock.

Difference between wait and sleep?

Let's see the important differences between wait and sleep methods.
----------------------------------------------------------------------------------------------------------------
wait()												  |					sleep()
----------------------------------------------------------------------------------------------------------------
wait() method releases the lock						  |	sleep() method doesn't release the lock.
----------------------------------------------------------------------------------------------------------------
is the method of Object class						  |	is the method of Thread class
----------------------------------------------------------------------------------------------------------------
is the non-static method							  |	is the static method
----------------------------------------------------------------------------------------------------------------
should be notified by notify() or notifyAll() methods |	after the specified amount of time, sleep is completed.
----------------------------------------------------------------------------------------------------------------


Example of inter thread communication in java: InterThreadCommunication.java

Interrupting a Thread:
----------------------

If any thread is in sleeping or waiting state (i.e. sleep() or wait() is invoked), calling the interrupt() 
method on the thread, breaks out the sleeping or waiting state throwing InterruptedException. 
If the thread is not in the sleeping or waiting state, calling the interrupt() method performs normal behavior 
and doesn't interrupt the thread but sets the interrupt flag to true. 

Let's first see the methods provided by the Thread class for thread interruption.
The 3 methods provided by the Thread class for interrupting a thread

public void interrupt()
public static boolean interrupted()
public boolean isInterrupted()

Example of interrupting a thread that stops working:  
TestInterruptingThread1 .java

Example of interrupting a thread that doesn't stop working:
TestInterruptingThread2.java

Example of interrupting thread that behaves normally:
TestInterruptingThread3 .java

What about isInterrupted and interrupted method?

The isInterrupted() method returns the interrupted flag either true or false. 
The static interrupted() method returns the interrupted flag after that it sets the flag to false if it is true.

eg: TestInterruptingThread4.java

----------------------------------
Reentrant Monitor(object) in Java:
----------------------------------

According to Sun Microsystems, Java monitors are reentrant means java thread can reuse the same monitor(object) 
for different synchronized methods if method is called from the method.

Advantage of Reentrant Monitor:
-------------------------------

It eliminates the possibility of single thread deadlocking.

ex: ReentrantExample.java

In this class, m and n are the synchronized methods. The m() method internally calls the n() method.
Now let's call the m() method on a thread. 
In the class given below, we are creating thread using annonymous class.

