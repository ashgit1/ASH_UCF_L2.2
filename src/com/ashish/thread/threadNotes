What is Thread in java?
A thread is a lightweight sub process, a smallest unit of processing. It is a separate path of execution.
Threads are independent, if there occurs exception in one thread, it doesn't affect other threads.
It shares a common memory area.

http://www.javatpoint.com/multithreading-in-java

Life cycle of a Thread (Thread States):
1) New:
The thread is in new state if you create an instance of Thread class but before the invocation of start() method.

2) Runnable:
The thread is in runnable state after invocation of start() method, but the thread scheduler has not 
selected it to be the running thread.

3) Running:
The thread is in running state if the thread scheduler has selected it.

4) Non-Runnable (Blocked):
This is the state when the thread is still alive, but is currently not eligible to run.

5) Terminated:
A thread is in terminated or dead state when its run() method exits.


How to create thread?
There are two ways to create a thread:

By extending Thread class
By implementing Runnable interface.

Thread class:
Thread class provide constructors and methods to create and perform operations on a thread.
Thread class extends Object class and implements Runnable interface.

Commonly used Constructors of Thread class:
Thread()
Thread(String name)
Thread(Runnable r)
Thread(Runnable r,String name)

Commonly used methods of Thread class:

public void start(): starts the execution of the thread. JVM calls the run() method on the thread.
public void run(): is used to perform action for a thread.
public void sleep(long miliseconds): Causes the currently executing thread to sleep (temporarily cease execution) 
for the specified number of milliseconds.

public void join(): waits for a thread to die.
public void join(long miliseconds): waits for a thread to die for the specified miliseconds.

public int getPriority(): returns the priority of the thread.
public int setPriority(int priority): changes the priority of the thread.
public String getName(): returns the name of the thread.
public void setName(String name): changes the name of the thread.
public Thread currentThread(): returns the reference of currently executing thread.
public int getId(): returns the id of the thread.

public Thread.State getState(): returns the state of the thread.

public boolean isAlive(): tests if the thread is alive.

public void yield(): causes the currently executing thread object to temporarily pause 
and allow other threads to execute.

public void suspend(): is used to suspend the thread(depricated).
public void resume(): is used to resume the suspended thread(depricated).
public void stop(): is used to stop the thread(depricated).
public boolean isDaemon(): tests if the thread is a daemon thread.
public void setDaemon(boolean b): marks the thread as daemon or user thread.
public void interrupt(): interrupts the thread.
public boolean isInterrupted(): tests if the thread has been interrupted.
public static boolean interrupted(): tests if the current thread has been interrupted.

-------------------------------------------------------------------------------------
Runnable interface:

The Runnable interface should be implemented by any class whose instances are intended to be 
executed by a thread. Runnable interface have only one method named run().
public void run(): is used to perform action for a thread.
Starting a thread:

start() method of Thread class is used to start a newly created thread. It performs following tasks:
A new thread starts(with new callstack).
The thread moves from New state to the Runnable state.
When the thread gets a chance to execute, its target run() method will run.

-------------------------------------------------------------------------------------

Thread Scheduler in Java:
Thread scheduler in java is the part of the JVM that decides which thread should run.
There is no guarantee that which runnable thread will be chosen to run by the thread scheduler.
Only one thread at a time can run in a single process.
The thread scheduler mainly uses preemptive or time slicing scheduling to schedule the threads.

Difference between preemptive scheduling and time slicing:
Under preemptive scheduling, the highest priority task executes until it enters the waiting or dead states 
or a higher priority task comes into existence. 
Under time slicing, a task executes for a predefined slice of time and then reenters the pool of ready tasks. 
The scheduler then determines which task should execute next, based on priority and other factors.

-------------------------------------------------------------------------------------

Sleep method in java:
The sleep() method of Thread class is used to sleep a thread for the specified amount of time.
Syntax of sleep() method in java

The Thread class provides two methods for sleeping a thread:
public static void sleep(long miliseconds)throws InterruptedException
public static void sleep(long miliseconds, int nanos)throws InterruptedException

(**) As you know well that at a time only one thread is executed. 
If you sleep a thread for the specified time,the thread shedular picks up another thread and so on.
Eg: TestSleepMethod1.java
-------------------------------------------------------------------------------------

Can we start a thread twice ?
No. 
After starting a thread, it can never be started again. 
If you does so, an IllegalThreadStateException is thrown. 
In such case, thread will run once but for second time, it will throw exception.
Eg: TestThreadTwice1.java

-------------------------------------------------------------------------------------

What if we call run() method directly instead start() method?
Each thread starts in a separate call stack.
Invoking the run() method from main thread, the run() method goes onto the current 
call stack rather than at the beginning of a new call stack.
Eg: Refer diagram at http://www.javatpoint.com/what-if-we-call-run()-method-directly
TestCallRun1.java and TestCallRun2.java

-------------------------------------------------------------------------------------

The join() method:
The join() method waits for a thread to die. 
In other words, it causes the currently running threads to stop executing until 
the thread it joins with completes its task.	
Eg: TestJoinMethod1.java, TestJoinMethod2.java, TestJoinMethod3.java 

The currentThread() method:
The currentThread() method returns a reference to the currently executing thread object.
Thread.currentThread().getName() = gives the name of the thread.

-------------------------------------------------------------------------------------

Naming a thread:
The Thread class provides methods to change and get the name of a thread.
public String getName(): is used to return the name of a thread.
public void setName(String name): is used to change the name of a thread.

Eg:TestJoinMethod3.java
-------------------------------------------------------------------------------------

Priority of a Thread (Thread Priority):

Each thread have a priority. Priorities are represented by a number between 1 and 10. 
In most cases, thread scheduler schedules the threads according to their priority 
(known as preemptive scheduling). 
But it is not guaranteed because it depends on JVM specification that which scheduling it chooses.

3 constants defined in Thread class:

public static int MIN_PRIORITY
public static int NORM_PRIORITY
public static int MAX_PRIORITY

Default priority of a thread is 5 (NORM_PRIORITY). 
The value of MIN_PRIORITY is 1.
The value of MAX_PRIORITY is 10.


-------------------------------------------------------------------------------------
Daemon Thread:
Points to remember for Daemon Thread in Java

It provides services to user threads for background supporting tasks. It has no role 
in life than to serve user threads.
Its life depends on user threads.
It is a low priority thread.

Why JVM terminates the daemon thread if there is no user thread?

The sole purpose of the daemon thread is that it provides services to user thread for 
background supporting task. 
If there is no user thread, why should JVM keep running this thread. 
That is why JVM terminates the daemon thread if there is no user thread.

The java.lang.Thread class provides two methods for java daemon thread:
public void setDaemon(boolean status)
public boolean isDaemon()

Eg: TestDaemonThread1.java

Imp: If you want to make a user thread as Daemon, it must not be started otherwise it will 
throw IllegalThreadStateException.
Eg: TestDaemonThread2.java
-------------------------------------------------------------------------------------

Java Thread Pool:
In case of thread pool, a group of fixed size threads are created. A thread from the thread pool 
is pulled out and assigned a job by the service provider. After completion of the job, thread 
is contained in the thread pool again.

Advantage of Java Thread Pool:

Better performance It saves time because there is no need to create new thread.

Real time usage:

It is used in Servlet and JSP where container creates a thread pool to process the request.

Ex: TestThreadPool.java and WorkerThread.java [this example is not clear]
http://www.javatpoint.com/java-thread-pool
-------------------------------------------------------------------------------------

ThreadGroup in Java:
Java provides a convenient way to group multiple threads in a single object. In such way,
we can suspend, resume or interrupt group of threads by a single method call.

Note: Now suspend(), resume() and stop() methods are deprecated.
Java thread group is implemented by java.lang.ThreadGroup class.

Constructors of ThreadGroup class(2):
1. ThreadGroup(String name)						: creates a thread group with given name.
2. ThreadGroup(ThreadGroup parent, String name)	: creates a thread group with given parent group and name.

Important methods of ThreadGroup class:

1)  int activeCount()		: returns no. of threads running in current group.
2)	int activeGroupCount()	: returns a no. of active group in this thread group.
3)	void destroy()			: destroys this thread group and all its sub groups.
4)	String getName()		: returns the name of this group.
5)	ThreadGroup getParent()	: returns the parent of this group.
6)	void interrupt()		: interrupts all threads of this group.
7)	void list()				: prints information of this group to standard console.

Eg: ThreadGroupDemo.java
-------------------------------------------------------------------------------------

* Shutdown Hook:
If you want to execute some code before JVM shuts down, use shutdown hook.

When does the JVM shut down?
The JVM shuts down when:

1.    user presses ctrl+c on the command prompt
2.    System.exit(int) method is invoked
3.    user logoff
4.    user shutdown etc.

The (Runnable r) method:
The () method of Runtime class is used to register the thread with the Virtual Machine. 
Syntax:
public void (Runnable r){}  


The object of Runtime class can be obtained by calling the static factory method getRuntime(). 
For example:
Runtime r = Runtime.getRuntime();

Factory method:
The method that returns the instance of a class is known as factory method. 
Ex: TestShutdown1.java

* Note: The shutdown sequence can be stopped by invoking the halt(int) method of Runtime class.

-------------------------------------------------------------------------------------
* Multitasking:

How to perform single task by multiple threads?
If you have to perform single task by many threads, have only one run() method
Eg: TestMultitasking1.java and TestMultitasking2.java

Note: Each thread run in a separate callstack.

MultipleThreadsStack:
Main() : StackA (main thread)
run()  : StackB (t1 thread)
run()  : StackC (t2 thread)

How to perform multiple tasks by multiple threads (multitasking in multithreading)?

If you have to perform multiple tasks by multiple threads,have multiple run() methods.
For example: TestMultitasking3.java and TestMultitasking5.java
Program of performing two tasks by two threads.

Same example as above by annonymous class that implements Runnable interface:
TestMultitasking5.java

-------------------------------------------------------------------------------------

* Java Garbage Collection:

In java, garbage means unreferenced objects.
Garbage Collection is process of reclaiming the runtime unused memory automatically. 
In other words, it is a way to destroy the unused objects.

To do so, we were using free() function in C language and delete() in C++. 
But, in java it is performed automatically. So, java provides better memory management.

Advantage of Garbage Collection:

It makes java memory efficient because garbage collector removes the unreferenced objects from heap memory.
It is automatically done by the garbage collector(a part of JVM) so we don't need to make extra efforts.

How can an object be unreferenced?

There are many ways:
1. By nulling the reference
ex: Employee e=new Employee();  
	e=null;  

2. By assigning a reference to another
ex: Employee e1=new Employee();  
	Employee e2=new Employee();  
	e1=e2;	//now the first object referred by e1 is available for garbage collection  

3. By annonymous object etc.
ex: new Employee();  


finalize() method:

The finalize() method is invoked each time before the object is garbage collected. 
This method can be used to perform cleanup processing. 
This method is defined in Object class as: protected void finalize(){}  

* Note: 
The Garbage collector of JVM collects only those objects that are created by new keyword. 
So if you have created any object without new, you can use finalize method to perform 
cleanup processing (destroying remaining objects).

gc() method:

The gc() method is used to invoke the garbage collector to perform cleanup processing. 
The gc() is found in System and Runtime classes.

public static void gc(){}  

* Note: 
Garbage collection is performed by a daemon thread called Garbage Collector(GC). 
This thread calls the finalize() method before object is garbage collected.

Ex: TestGarbage1.java

* Note:
Neither finalization nor garbage collection is guaranteed.

-------------------------------------------------------------------------------------

Java Runtime class:

Java Runtime class is used to interact with java runtime environment. Java Runtime class
provides methods to execute a process, invoke GC, get total and free memory etc. 
There is only one instance of java.lang.Runtime class is available for one java application.
The Runtime.getRuntime() method returns the singleton instance of Runtime class.

Important methods of Java Runtime class:
1)  public static Runtime getRuntime()					  : returns the instance of Runtime class.
2)	public void exit(int status)						  :	terminates the current virtual machine.
3)	public void (Thread hook)			  				  : registers new hook thread.
4)	public Process exec(String command)throws IOException :	executes given command in a separate process.
5)	public int availableProcessors()					  :	returns no. of available processors.
6)	public long freeMemory()							  :	returns amount of free memory in JVM.
7)	public long totalMemory()							  :	returns amount of total memory in JVM.

ex: Runtime1.java and MemoryTest.java

-------------------------------------------------------------------------------------